" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" mkdir ~/.vim/undodir 
" mkdir ~/.vim/swp
" https://github.com/neoclide/coc.nvim/wiki/Install-coc.nvim
" :PlugInstall
" :CocInstall coc-diagnostic coc-sh coc-json coc-clangd
" :CocInstall coc-tsserver coc-json coc-html coc-css coc-pyright coc-rls coc-prettier

" others Coc: coc-word coc-snippets
" C/C++ Coc: https://github.com/clangd/coc-clangd
"
"===========================================================================
" Coc:
" Rust 
" https://github.com/neoclide/coc-rls
" https://github.com/neoclide/coc-rls
" https://github.com/fannheyward/coc-rust-analyzer
"
" https://github.com/rust-lang/rust.vim
" Dart:
" https://github.com/theniceboy/coc-flutter-tools
"===========================================================================
"===========================================================================
" General
"===========================================================================
set nocompatible                        "Use Vim settings, rather then Vi settings (it influences other options)
set backspace=indent,eol,start          "Allow backspacing over indention, line breaks and insertion start.
set history=1000                        " Set the commands to save in history default number is 20.
set showcmd                             "Show incomplete commands at the bottom
set showmode                            "Show current mode at the bottom
set hidden                              "Manage multiple buffers effectively (Needed to keep multiple buffers open)
set cursorcolumn                       " Highlight cursor line underneath the cursor vertically.

set path+=**          " Searches current directory recursively.
set t_Co=256                    " Set if term supports 256 colors.
set clipboard=unnamedplus       " Copy/paste between vim and other programs.
let g:rehash256 = 1             " to avoid Normal text being black

" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

"===========================================================================
" vim-plug
"===========================================================================
call plug#begin()

" colorschemes
Plug 'arcticicestudio/nord-vim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'cocopon/iceberg.vim'
" statusline
Plug 'itchyny/lightline.vim' |
            \ Plug 'gkeep/iceberg-dark' |                 " https://github.com/gkeep/iceberg-dark
            \ Plug 'mengelbrecht/lightline-bufferline'    " Tabline / Bufferline: https://github.com/mengelbrecht/lightline-bufferline
" Git https://github.com/tpope/vim-fugitive
Plug 'tpope/vim-fugitive'
" https://github.com/preservim/nerdtree
Plug 'preservim/nerdtree' |
            \ Plug 'Xuyuanp/nerdtree-git-plugin' |
            \ Plug 'ryanoasis/vim-devicons'
" https://github.com/mhinz/vim-signify/
if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif
" https://github.com/jiangmiao/auto-pairs
Plug 'jiangmiao/auto-pairs', {'for': ['python', 'javascript', 'rust', 'dart', 'c', 'css']}

""" Rust:
" https://github.com/rust-lang/rust.vim
"Plug 'rust-lang/rust.vim', {'for', 'rust'}
Plug 'rust-lang/rust.vim'

""" Python:
" python-mode: https://github.com/python-mode/python-mode
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
" coc.vim: https://github.com/neoclide/coc.nvim and https://github.com/neoclide/coc.nvim/wiki/Install-coc.nvim
"Install extensions: CocInstall coc-tsserver coc-json coc-html coc-css coc-pyright coc-rls
" Use release branch (recommend)

"Kivy syntax highlighting
"Plug 'farfanoide/vim-kivy'

""" HTML:
" https://github.com/mattn/emmet-vim
Plug 'mattn/emmet-vim', {'for': ['html', 'css']}
"Plug 'turbio/bracey.vim'
Plug 'turbio/bracey.vim', {'do': 'npm install --prefix server'}
""" Javascript:
" https://github.com/pangloss/vim-javascript
"Plug 'pangloss/vim-javascript'

""" coc:
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Or build from source code by using yarn: https://yarnpkg.com
"Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}

call plug#end()

"===========================================================================
" Interface
"===========================================================================
set ruler                               "Always show cursor position
set wildmenu                            "Display command line's tab complete options as a menu
set tabpagemax=40                       "Maximum number of tab pages that can be opened from the command line
"set cursorline                         "Highlight the line currently under cursor
set number                              "Show line numbers on sidebar
set relativenumber
set noerrorbells                        "Disable beep on errors.
set visualbell                          "Flash the screen instead of beeping on errors
set mouse=a                             "Enable mouse for scrolling and resizing
set title                               "Set the window’s title, reflecting the file currently being edited
set background=dark                     "Use colors that suit a dark background
"colorscheme: default, blue, darkblue, delek, desert, 
"elford, evening, industry, koehler, morning, murphy, 
"pablo, peachpuff, ron, shine, slate, torte, zellner  
"colorscheme pablo
"colorscheme elflord

"colorscheme nord
"colorscheme dracula
colorscheme iceberg

"===========================================================================
"  Indentation
"===========================================================================
set autoindent                          " automatic indent new lines, align the new line indent with the previous line
filetype off 
" Enable type file detection. Vim will be able to try to detect the type of file in use.
"filetype on
" Enable plugins and load plugin for the detected file type.
"filetype plugin on
" Load an indent file for the detected file type.
"filetype indent on
filetype plugin indent on               "Smart auto indentation (instead of old smartindent option)

"===========================================================================
"  Formatting
"===========================================================================
set autoread               " set to auto read when a file is changed from the outside
set encoding=utf-8         " set utf8 as standard encoding and en_US as the standard language
"inoremap # X<BS>#
set nowrap                 " Dot not wrap lines. to display long lines as just one line (i.e. you have to scroll horizontally to see the entire line)
set ffs=unix,dos,mac       " use Unix as the standard file type
set softtabstop=2          " insert/delete # spaces when hitting a TAB/BACKSPACE (Indent by 2 spaces when hitting tab. For python 'set softtabstop=4')
set tabstop=4              " Show existing tab with 4 space width
set shiftwidth=4           " operation >> indents 4 columns; << unindents 4 columns (Indent by 4 spaces when auto-indenting)
set smartindent            " be smart about it. like above but more generic
set expandtab              " use space characters instead of TAB, insert spaces when hitting TABs
set nosmarttab             " fuck tabs
set textwidth=180           " lines longer than 179 columns will be broken
set colorcolumn=+1         " color column 180

"===========================================================================
"  Search
"===========================================================================
set incsearch                           "Find the next match as we type the search
set hlsearch                            "Highlight searches by default.
set ignorecase
" Override the ignorecase option if searching for capital letters.
" This will allow you to search specifically for capital letters.
set smartcase                           " ... unless you type a capital.
set showmatch                           " Show matching words during a search.

"===========================================================================
" Text rendering options:
"===========================================================================
set linebreak                           "Wrap lines at convenient points, avoid wrapping a line in the middle of a word.
set scrolloff=10                        "The number of screen lines to keep above and below the cursor
set sidescrolloff=5                     "The number of screen columns to keep to the left and right of the cursor.
syntax enable                           "Enable syntax highlighting.

"===========================================================================
"  Miscellaneous 
"===========================================================================
set confirm                             "Display a confirmation dialog when closing an unsaved file.
set nomodeline                          "Ignore file’s mode lines; use vimrc configurations instead.
set nrformats-=octal                    "Interpret octal as decimal when incrementing numbers.
"set shell==/usr/bin/zsh                "The shell used to execute commands.
"set spell                              "Enable spellchecking.

"===========================================================================
"  Remapping:                                                                                                                                                                        
" ,         <leader>                                                                                                                                                                 
" jk        <esc> or escape to NORMAL MODE                                                                                                                                           
" Q         quit                                                                                                                                                                     
" Ctrl+q    to exit and discarding changes (INSERT/NORMAL MODE)                                                                                                                                             
" ,,        save and exit (INSERT/NORMAL MODE)                                                                                                                                       
" Ctrl+d    save and exit (INSERT/NORMAL MODE)                                  
" Ctrl+s    save (INSERT/NORMAL MODE) 
" F7        Syntax off/on
" ,n        Line numbers off/on
" ,l        Display of whitespace
"
"===========================================================================
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" Change the mapleader from \ to ,
let mapleader = ","
let g:mapleader = ","
" exit to normal mode with 'jk'
inoremap jk <esc>
" allow quit via single keypress (Q). If you have unsaved buffers, it'll prompt you before exiting.
map Q :q<CR>
"map <c-Q> :qa<CR>
" normal mode: saves the file and exits. keypress ,,
nnoremap <leader><leader> :x<cr>
" insert mode: saves the file and exits. keypress ,,
inoremap <leader><leader> <esc>:xa<cr>
"----- Keymaps in Insert mode:
"ctrl + q: to exit discarding changes.
inoremap <c-q> <esc>:qa!<cr>                " quit discarding changes
"ctrl + s: to save.
inoremap <c-s> <esc>:w<cr>a
"ctrl + d: to save and exit
inoremap <c-d> <esc>:wq!<cr>               " save and exit
"----- Keymaps in Normal mode:
"ctrl + d: to save and exit
nnoremap <c-d> :wq!<cr>
"ctrl + s: to save.
"nmap <c-s> :w<cr>
nnoremap <c-s> :w<cr>
"ctrl + q: to exit discarding changes.
nnoremap <c-q> :qa!<cr>

" You can toggle the syntax on/off with keyup <F7>:
map <F7> :if exists("g:syntax_on") <Bar> syntax off <Bar> else <Bar> syntax enable <Bar> endif <CR>
" This appends the current date and time after the cursor:
"map <F2> a<C-R>=strftime("%c")<CR><Esc>
" use <leader>N toggle line numbers on/off
nnoremap <leader>n :setlocal number! relativenumber!<cr>
" use <leader>l to toggle display of whitespace
"nmap l :set list!<CR>
nmap <leader>l :set list!<CR>
" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

"===========================================================================
" Using tab pages: 
" gt        Next tab
" gT        Prior tab
" [1-0]gt   Numbered tab
" ctrl-w T  If current file is part of a split view, then open currently selected split as a new tab
" :tabedit or :tabe FILENAME   Open a file in a new tab
" :tabmove #      Move current tab to position # (Without #, Move current tab to the end)
"===========================================================================
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

map <leader>tn :tabnew<cr>
map <leader>t<leader> :tabnext
map <leader>tm :tabmove
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
"===========================================================================
"  Python
"===========================================================================
augroup .py
    autocmd!
    autocmd FileType foo setlocal softtabstop=0 noexpandtab nosmarttab shiftwidth=4 tabstop=4 textwidth=79
augroup END

"===========================================================================
"  HMTL
"===========================================================================
"autocmd FileType html setlocal textwidth=500
autocmd FileType html setlocal softtabstop=0 noexpandtab nosmarttab shiftwidth=2 tabstop=2 textwidth=100

"===========================================================================
"  CSS
"===========================================================================
autocmd FileType scss setl iskeyword+=@-@
"===========================================================================
"  Others
"===========================================================================
" Persistent undo
set undofile                  " Maintain undo history between sessions
set undodir=~/.vim/undodir    " Dedicated directory for these undo history files

" Swap file
"set noswapfile                " Disable swap file
"set swapfile
"set directory=~/.vim/swp//    " Swap file organizaion. save all the swap files in location. 

" Backup files
" Some servers have issues with backup files, see #649.
set nobackup                    " No auto backups
set nowritebackup
"set backup
"set writebackup
"set backupdir=~/.vim/.backup//

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"===========================================================================
" Commands Coc
"
" :CocInfo or :checkhealth (Neovim)
" :CocOpenLog
" :CocLocalConfig
" :CocConfig
" :CocList extensions
"
"===========================================================================
"
" ,cd             CocDiagnostics
" ,cdk            CocDiagnostics prev
" ,cdj            CocDiagnostics next
" gd              GoTo definition
" gy              GoTo type definition
" gi              GoTo implementation
" gw              GoTo references
" K               Show Documentation
" ,rn             Symbol renaming
" ,f              Formatting selected code: JavaScript/TypeScript/CSS/JSON
"===========================================================================
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <leader>cd :CocDiagnostics<cr>
nmap <silent> ,cdk <Plug>(coc-diagnostic-prev)
nmap <silent> ,cdj <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

"===========================================================================
" Plug 
"===========================================================================
""""""""""" Emmet:
let g:user_emmet_mode='a'    "enable all function in all mode.
"Enable just for html/css
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

""""""""""" lightline.vim
set laststatus=2
set noshowmode

if !has('gui_running')
      set t_Co=256
  endif

let g:lightline = {
      \ 'colorscheme': 'icebergDark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

"""""""""" lightline-bufferline
set showtabline=2


let g:lightline = { 'colorscheme': 'PaperColor' }
let g:lightline.tabline = {
            \ 'left': [ [ 'tabs' ] ],
            \ 'right': [ [ 'bufnum'] ] }
let g:lightline.separator = { 'left': '', 'right': '' }
let g:lightline.subseparator = {'left': '', 'right': '' }
let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}

let s:nbsp = ' '
let g:lightline#bufferline#filename_modifier = ":t".s:nbsp
let g:lightline#bufferline#shorten_path      = 1
let g:lightline#bufferline#show_number       = 2
let g:lightline#bufferline#min_buffer_count  = 0
let g:lightline#bufferline#unnamed           = '[No Name]'
let g:lightline#bufferline#read_only         = '  '
let g:lightline#bufferline#modified          = " + "
let g:lightline#bufferline#enable_devicons = 1
let g:lightline#bufferline#unicode_symbols = 1
let g:lightline#bufferline#number_map = {
\ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
\ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'}
" \ 0: '₀', 1: '₁', 2: '₂', 3: '₃', 4: '₄',
" \ 5: '₅', 6: '₆', 7: '₇', 8: '₈', 9: '₉'}
let g:lightline#gitdiff#indicator_added = ': '
let g:lightline#gitdiff#indicator_deleted = ': '
let g:lightline#gitdiff#indicator_modified = 'ﰲ: '
let g:lightline#gitdiff#separator = ' '

autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()
""""""""""  Nerdtree
" Uncomment to autostart the NERDTree
" autocmd vimenter * NERDTree
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
"let NERDTreeShowLineNumbers = 1
let NERDTreeShowBookmarks = 1
let NERDTreeIgnore = ['.git$', '.swo$', '.swp$', '.pyc$', '.pyo$', '__pycache__$']
let NERDTreeChDirMode = 0                 " Set the current working directory to the directory NERDtree was opened in
let NERDTreeShowHidden = 1                " Display hidden files by default
let NERDTreeMinimalUI = 1
let g:NERDTreeWinSize = 30
"let NERDTreeQuitOnOpen = 1                " Automatically close when you open a file
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeKeepTreeInNewTab=1
let NERDTreeWinPos=1                      " Open on the right side
"nnoremap <leader>n :NERDTreeFocus<CR>
"nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>        " Toggle the NERDtree window open and closed with Ctrl+t
nnoremap <C-f> :NERDTreeFind<CR>          " to open the file explorer with the cursor focus set to the file in your current vim buffer
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Start NERDTree, unless a file or session is specified, eg. vim -S session_file.vim.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && v:this_session == '' | NERDTree | endif
" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

"""""""""	Nerdtree-git
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }
